module flex_counter
#(
  parameter NUM_CNT_BITS = 4
)
(
  input wire clk,
  input wire n_rst,
  input wire clear,
  input wire count_enable,
  input wire [NUM_CNT_BITS-1:0] rollover_val,
//  output wire [NUM_CNT_BITS-1:0] count_out,
  output reg rollover_flag
       //reg
);

reg [NUM_CNT_BITS-1:0] count;
reg [NUM_CNT_BITS-1:0] next_count;
reg roll;

// REGISTER SETTINGS
always_ff @ (posedge clk, negedge n_rst) begin
  if (n_rst==0) begin
    count         <=0; //
    rollover_flag <= 0;
  end
  else begin
  count <= next_count;
  rollover_flag <= roll;
  end
end

// NEXT STATE LOGIC
always_comb begin
  roll = 1'b0;
  next_count = count;
  // Check CLEAR
  if (clear)
    next_count = 0;
  // CHECK COUNT_ENABLE
  else if (count_enable) begin
    // CHECK ROLLOVER
    if (rollover_flag)
      next_count = 1;
    else
      next_count = count + 1;
  end
  // SET ROLLOVER
  if (next_count==rollover_val)
    roll = 1'b1;  

end // ending always_comb block




module timer
(
  input wire clk,
  input wire n_rst,
  input wire enable_timer,
  output reg shift_strobe,
  output reg packet_done
);

wire [3:0] ten; wire [3:0] nine;
assign ten = 4'd10; assign nine = 4'd9;

flex_counter TENCOUNT (
              .clk(clk),
              .n_rst(n_rst), 
              .clear(packet_done),
              .count_enable(enable_timer),
              .rollover_val(ten),//(4'd10),
              .rollover_flag(shift_strobe)
             ); 
flex_counter NINECOUNT (
              .clk(clk), 
              .n_rst(n_rst), 
              .clear(packet_done),
              .count_enable(shift_strobe),
              .rollover_val(nine),//(4'd9),
              .rollover_flag(packet_done)
             );
endmodule
